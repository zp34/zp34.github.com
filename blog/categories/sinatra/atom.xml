<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: sinatra | Code Junkie]]></title>
  <link href="http://zp34.github.com/blog/categories/sinatra/atom.xml" rel="self"/>
  <link href="http://zp34.github.com/"/>
  <updated>2013-04-15T20:08:52+08:00</updated>
  <id>http://zp34.github.com/</id>
  <author>
    <name><![CDATA[Jason Lee]]></name>
    <email><![CDATA[zhipeng34@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Test Driven Development with Sinatra, Rspec, Capybara and Guard]]></title>
    <link href="http://zp34.github.com/blog/2013/04/12/test-driven-development-with-sinatra-rspec-and-guard/"/>
    <updated>2013-04-12T17:51:00+08:00</updated>
    <id>http://zp34.github.com/blog/2013/04/12/test-driven-development-with-sinatra-rspec-and-guard</id>
    <content type="html"><![CDATA[<p>At my new work, we use the Sinatra framework to develop our projects. Being a huge fan of TDD, my first priority was to add auto testing functionalities to the projects.</p>

<p>Having done a few Ruby on Rails projects previously, I particularly love the TDD system set up by <a href="http://ruby.railstutorial.org/#author">Michael Hartl</a> in <a href="http://ruby.railstutorial.org/ruby-on-rails-tutorial-book">his Ruby on Rails Tutorial</a>. However, that is specific to the Rails framework and needed hacking to function in Sinatra.</p>

<p>Assuming you already have a Sinatra App running with <code>bundler</code>, add the following gems to your project's <code>Gemfile</code> and run <code>bundle install</code>. If you are not using <code>bundler</code> in your projects, install and require these gems separately in your project.
{% codeblock Gemfile lang:ruby %}
group :development, :test do
  gem 'rspec', '2.13.0'</p>

<p>  # guard gems
  gem 'guard', '1.7.0'
  gem 'guard-rspec', '2.5.2'</p>

<p>  # spork gems
  gem 'guard-spork', '1.4.2'
  gem 'spork', '0.9.2'
end</p>

<p>group :test do
  gem 'capybara', '1.1.2'</p>

<p>  ###### System-dependent gems goes below here
  ### Test gems on Macintosh OS X
  # gem 'rb-fsevent', '0.9.1', :require => false
  # gem 'growl', '1.0.3'</p>

<p>  ### Test gems on Linux
  # gem 'rb-inotify', '0.8.8'
  # gem 'libnotify', '0.5.9'</p>

<p>  ### Test gems on Windows
  # gem 'rb-fchange', '0.0.5'
  # gem 'rb-notifu', '0.0.4'
  # gem 'win32console', '1.3.0'
end
{% endcodeblock %}
Uncomment the above gems according to the platform which you are developing on.</p>

<p>Create a spec folder in the root of your project. In this folder, create a folder <code>requests</code> and file <code>spec_helper.rb</code>. All your test files will be stored in the requests folder.
{% codeblock lang:sh %}
mkdir spec/
mkdir spec/requests/
touch spec/spec_helper.rb
{% endcodeblock %}</p>

<p><code>spec_helper</code> will be loaded at the start of your test scripts. Both Capybara and the Rack/test methods will be loaded by the <code>spec_helper</code> file and can be used while developing the test scripts.
{% codeblock spec_helper.rb lang:ruby %}
require 'rubygems'
require 'spork'</p>

<p>ENV['RACK_ENV'] = 'test'                    # force the environment to 'test'</p>

<p>Spork.prefork do
  require File.join(File.dirname(<strong>FILE</strong>), '..', 'myapp.rb')</p>

<p>  require 'rubygems'
  require 'sinatra'
  require 'rspec'
  require 'rack/test'
  require 'capybara'
  require 'capybara/dsl'</p>

<p>  Capybara.app = Sinatra::Application       # in order to make Capybara work</p>

<p>  # set test environments
  set :environment, :test
  set :run, false
  set :raise_errors, true
  set :logging, false</p>

<p>  RSpec.configure do |conf|</p>

<pre><code>conf.include Rack::Test::Methods
conf.include Capybara::DSL
</code></pre>

<p>  end</p>

<p>  def app</p>

<pre><code>@app ||= Sinatra::Application
</code></pre>

<p>  end
end</p>

<p>Spork.each_run do
end
{% endcodeblock %}</p>

<p>Next, create <code>Guardfile</code> and <code>.rspec</code> at the root folder of your project. The Guard gem will monitor the files in your projects based on the rules defined within <code>Guardfile</code>. The <code>.rspec</code> file contains the command line options passed to the process when rspec is executed.
{% codeblock Guardfile lang:ruby %}
require 'active_support/core_ext'</p>

<p>guard 'spork' do
  watch('Gemfile')
  watch('Gemfile.lock')
  watch('spec/spec_helper.rb') { :rspec }
  watch('spec/support/')
  watch('myapp.rb')           # for example, reload spork when myapp.rb is changed
end</p>

<p>guard 'rspec', :wait => 60, :all_after_pass => false, :cli => '--drb' do
  watch(%r{<sup>spec/.+_spec.rb$})</sup>
  watch(%r{<sup>spec/factories/.+.rb$})</sup>
  watch('spec/spec_helper.rb')                { "spec" }
  watch(%r{<sup>spec/support/(.+).rb$})</sup>          { "spec" }
  watch('myapp.rb')                           { "spec" }
end
{% endcodeblock %}
{% codeblock .rpsec lang:sh %}
--colour
--format progress
--drb
{% endcodeblock %}</p>

<p>Now the configurations are complete. Install all the gems with <code>bundle install</code> command and create a new spec file to test your application. If you run the command <code>guard</code> or <code>bundle exec guard</code> in the root folder of your project, you will see Guard boot up and start to monitor the Sinatra project. Keep this command running as you develop your project and it will run your test scripts automatically each time you make a save.</p>

<p>As with TDD, always develop your tests before coding. In this example, if you want to create a new page with "Hello World" at the homepage "/", prepare a test file in the request folder called <code>spec/requests/home_page_spec.rb</code>. It is important to note that the <code>_spec.rb</code> at the end of the file is important as the <code>Guardfile</code> above is configured to monitor such files. As already stated, both capybara and rack/test methods can be used. The following example is coded using capybara dsl.
{% codeblock /spec/requests/home_page_spec.rb lang:ruby %}
require 'spec_helper'</p>

<p>describe "my first test" do
  subject { page }</p>

<p>  describe "Home page" do</p>

<pre><code>before { visit '/' }
it { should have_content('Hello World') }
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>Upon creating <code>/spec/requests/home_page_spec.rb</code>, Guard will auto execute and test the scripts in the folder. At this point Guard will auto run and fail as the controller is not yet ready. To run the test without using Guard, execute the command <code>rspec spec/requests/</code> to test everything in the folder without Guard or Spork.</p>

<p>Finally, to pass the test, create the controller in <code>myapp.rb</code>
{% codeblock myapp.rb lang:ruby %}
get '/' do
  "Hello World"
end
{% endcodeblock %}</p>

<p>And Guard should pass the test now.</p>
]]></content>
  </entry>
  
</feed>
